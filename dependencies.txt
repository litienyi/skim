# PDF Viewer Dependencies and Configuration Guide

## Core Dependencies (WORKING VERSIONS)
- react: ^18.2.0
- react-dom: ^18.2.0
- pdfjs-dist: 4.8.69 (CRITICAL: Must use this exact version)
- react-pdf: 9.2.1 (CRITICAL: Must use this exact version)

## Installation Command (WORKING)
```bash
npm install react-pdf@9.2.1 pdfjs-dist@4.8.69 --save-exact
```

## Development Dependencies
- @vitejs/plugin-react: ^4.2.1
- vite: ^5.0.0

## Backend Dependencies
- Flask: ^3.0.0
- PyMuPDF: ^1.23.8
- python-dotenv: ^1.0.0

## Critical Configuration Notes

### 1. PDF.js Worker Configuration
The worker must be configured exactly as follows in App.jsx:
```javascript
import pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry';
pdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker;
```

### 2. Vite Configuration
The vite.config.js must include:
```javascript
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    fs: {
      allow: ['..']
    }
  }
});
```

### 3. Common Issues and Solutions

#### PDF.js Worker Issues
- If you see "Error loading PDF" or worker-related errors:
  1. Verify pdfjs-dist version is exactly 4.8.69
  2. Verify react-pdf version is exactly 9.2.1
  3. Check that worker configuration is correct
  4. Ensure vite.config.js is properly configured

#### CORS Issues
- Backend must have CORS headers:
```python
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
    response.headers.add('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
    return response
```

### 4. File Structure
```
pdf-layout-tool/
├── src/
│   ├── App.jsx
│   └── App.css
├── backend/
│   └── app.py
├── public/
├── vite.config.js
├── package.json
└── requirements.txt
```

### 5. Development Workflow
1. Start backend: `python backend/app.py`
2. Start frontend: `npm run dev`
3. Access application at: http://localhost:5173

### 6. Version Control
- Always commit package.json and package-lock.json
- Never commit node_modules or __pycache__
- Keep requirements.txt updated with exact versions

### 7. Testing
- Test PDF upload with various file sizes
- Verify block detection works
- Check continuous scrolling functionality
- Ensure block overlays are visible and interactive

### 8. Performance Considerations
- Large PDFs may need pagination
- Consider implementing lazy loading for many pages
- Monitor memory usage with large documents

### 9. Security Notes
- Validate file types on both frontend and backend
- Implement file size limits
- Sanitize filenames
- Use environment variables for sensitive data

Remember: The most critical dependencies are:
- pdfjs-dist version 4.8.69
- react-pdf version 9.2.1
These versions must be installed with --save-exact to ensure exact version matching. 